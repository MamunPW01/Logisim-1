buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.yuvimasory:orange-extensions:1.3.0' // OSX support
    }
}

plugins {
    id "nebula.ospackage" version "8.5.6"
    id "edu.sc.seis.launch4j" version "2.4.9"
}

apply plugin: 'java'
apply plugin: 'distribution'

// Common Configuration //
project.version = '2.8.0'

project.ext.author = 'Dan Adler'
project.ext.email = '<2274667+dadler64@users.noreply.github.com>'
project.ext.copyright = '(C) 2021'
project.ext.description = 'Logisim Circuit Simulator'
project.ext.url = 'https://github.com/dadler64/Logisim'
project.ext.bundleId = 'com.cburch.logisim'
project.ext.mainClass = "${project.ext.bundleId}.Main"
project.ext.resPath = '/src/main/resources'

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    tasks.withType(JavaCompile) {
        sourceCompatibility = targetCompatibility = '1.10'
        options.compilerArgs << '-Xlint:deprecation'
        options.compilerArgs << '-Xlint:unchecked'
        options.encoding = 'UTF-8'
    }

    repositories {
        jcenter()
    }

    configurations {
        provided
        compile.extendsFrom provided
    }
}

// 'cleanIdea' task extension //
cleanIdea.doFirst {
    delete project.name + '.iws'
    delete 'out'
    followSymLinks = true
}

// All in one JAR file //
jar {
    manifest {
        attributes 'Main-Class': project.ext.mainClass, 'JD-FX-Version': project.version
    }

    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

// Java executable wrapper for Windows //
launch4j {
    createExe.dependsOn 'jar'

    version = textVersion = project.version
    fileDescription = productName = rootProject.name
    errTitle = "${rootProject.name} Wrapper"
    copyright = "${project.ext.author} ${project.ext.copyright}"
    fileDescription = project.ext.description
    icon = "${projectDir.path}/dist/windows/${project.name}.ico"
    bundledJrePath = '%JAVA_HOME%'
}

// Distributions for MacOS and Windows //
distributions {

    osx.contents {
        // info.plist file
        into("${rootProject.name}.app/Contents") {
            if (file("./dist/macos/Info.plist").exists()) {
                from('./dist/macos') {
                    include 'Info.plist'
                    expand VERSION: project.version,
                        JAR: project.name,
                        COPYRIGHT: project.ext.copyright,
                        AUTHOR: project.ext.author,
                        BUNDLE_ID: project.ext.bundleId,
                        MAIN_CLASS: project.ext.mainClass
                }
            } else {
                println("WARNING: Unable to locate the \'Info.plist\' file!\nMacOS bundled app may not work!")
            }
        }
        // universalJavaApplicationStub.sh
        into("${rootProject.name}.app/Contents/MacOS") {
            if (file("./dist/macos/universalJavaApplicationStub.sh").exists()) {
                from('./dist/macos') {
                    include 'universalJavaApplicationStub.sh'
                    fileMode 0755
                }
            } else {
                println("WARNING: Unable to locate the \'universalJavaApplicationStub.sh\' file!\nMacOS bundled app may not work!")
            }
        }
        // App *.icns file
        into("${rootProject.name}.app/Contents/Resources") {
            String iconFileName = "${rootProject.name}App"
            if (file("./dist/macos/${iconFileName}.icns").exists()) {
                from('./dist/macos') {
                    // Make sure this matches the name of the .icns file in the 'dist/macos/resources/' folder
                    include "${iconFileName}.icns"
                }
            } else {
                println("WARNING: Unable to locate icon for MacOS app at: <./dist/macos/resources/${rootProject.name}.icns>!")
            }
        }
        // Document *.icns file
        into("${rootProject.name}.app/Contents/Resources") {
            String iconFileName = "${rootProject.name}Doc"
            if (file("./dist/macos/${iconFileName}.icns").exists()) {
                from('./dist/macos') {
                    // Make sure this matches the name of the .icns file in the 'dist/macos/resources/' folder
                    include "${iconFileName}.icns"
                }
            } else {
                println("WARNING: Unable to locate icon for MacOS app at: <./dist/macos/resources/${rootProject.name}.icns>!")
            }
        }
        // project *.jar file
        into("${rootProject.name}.app/Contents/Resources/Java") {
            from jar
        }
        from 'LICENSE', 'README.md'
    }

    windows.contents {
        from "build/launch4j/${project.name}.exe"
        from 'LICENSE', 'README.md'
    }

    crossplatform.contents {
        from "build/libs/${project.name}-${project.version}.jar"
        from 'LICENSE', 'README.md'
    }

    installWindowsDist.dependsOn createExe
    windowsDistTar.dependsOn createExe
    windowsDistZip.dependsOn createExe

    installOsxDist.dependsOn 'jar'
    osxDistTar.dependsOn 'jar'
    osxDistZip.dependsOn 'jar'

    // Use this cross platform build until linux building resumes
    installCrossplatformDist.dependsOn 'jar'
    crossplatformDistTar.dependsOn 'jar'
    crossplatformDistZip.dependsOn 'jar'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ('*.jar'))
}
